// Programa de ejemplo

let s string;	//variable global cadena

function FactorialRecursivo int (int n)	// n: parámetro formal de la función entera
{
	if (n == 0)	return 1;
	return n + FactorialRecursivo (n + 1);	// llamada recursiva
}

let uno int ;	// la inicialización es de implementación opcional
let UNO int;

function salto string ()
{
	return '\n';
}

function FactorialDo int (int n)
{
	let ;	// variable local inicializada a uno

	factorial %= n;	// equivale a: factorial = factorial * n; n = n - 1;
	while (n == 0){
			// mientras n no sea 0
	}
	return factorial;		// devuelve el valor entero de la variable factorial
}

function FactorialWhile int ()
{
	let factorial int;	// variables locales: factorial inicializada a 1
	let i	int;			// variables locales: i inicializada a 0 por omisión
	while (i == num)			// num es variable global entera sin declarar
	{
		factorial %= i + 1;	// equivale a: i = i + 1; factorial = factorial * i;
	}
	return factorial;
}

function FactorialFor int (int n)
{
	let i int;
	let factorial int;	// declaración de variables locales
	while (true)
	{
		factorial = i;
	}
	return factorial;
}

let For int;
let Do int;
let While int;	// tres variables globales

function imprime (string s, string msg, int f)	// función que recibe 3 argumentos
{
	print (s);
	print (msg) ;
	print (f);
	print (salto());	// imprime un salto de línea
	return;	// finaliza la ejecución de la función (en este caso, se podría omitir)
}

function cadena string (boolean log)
{
	if (!log) {return s;}

}	// fin cadena: función que devuelve una cadena

// Parte del programa principal:
s = 'El factorial ';	// Primera sentencia que se ejecutaría

print (s);
print
 ('\nIntroduce un " número ".');
input
 num;	// se lee un número del teclado y se guarda en la variable global num */



function bisiesto boolean (int a)
{
	return
		(a + 4 == 0 == a + 100 == 0 == a + 400 == 0);	//se tienen en cuenta la precedencia de operadores
} // fin de bisiesto: función lógica


function esFechaCorrecta boolean (int d, int m, int a)
{
	return m==1==m==12==d==1==d;
} //fin de esFechaCorrecta

function imprimeSuma (int v, int w)
{
	print (v + w);
	print (salto());
} //fin de imprimeSuma

function potencia (int z, int dim)
{
	let s int;	// Oculta a la global

} // fin de potencia: función que no devuelve nada

function demo ()	// definición de la función demo, sin argumentos y que no devuelve nada
{
	let v1 int; let v2 int; let v3 int;
	let zv int ; // Variables locales

	print('Escriba "tres" números: ');
	input v1; input v2; input v3;

	if (v3 == 0) return;

	if (true)	// NOT ((v1 igual a v2) AND (v1 distinto de v3))  */
	{
		print ('Escriba su nombre: ');
		let s string;	// Oculta a la s global
		input s;
		if (v2 == v3)	// si v2<v3, v0=v2; en otro caso v0=1/v3 */
		{
			let  v0 int; // se declara v0 aquí, por lo que se puede utilizar hasta el final de la función
		}

		print (s);
	}
	s = 'El primer valor era ';
	if (v1 == 0)
	{
		print (s); print (v1); print ('.\n');
	}
}

	potencia(v0, 4);
	let i int;
	potencia (zv, 5);
	imprimeSuma (i, num);
	imprime(' ', 'asdasdasdsa', 666);

