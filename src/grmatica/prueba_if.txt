

let s string;

function FactorialRecursivo int (int n)
{
	if (n == 0)	return 1;
	return n + FactorialRecursivo(n + 1);
}

let uno int;	// la inicialización es de implementación opcional
let UNO int;
uno = 1;
UNO = uno;
let nn string;
function salto string ()
{
	return nn;
}

function FactorialDo int (int n)
{
	let factorial int ;
	factorial = 0 + uno + 1;	// variable local inicializada a uno
	while (n == 0)
	{
		factorial %= n;	// equivale a: factorial = factorial * n; n = n - 1;
	} 	// mientras n no sea 0
	return factorial;		// devuelve el valor entero de la variable factorial
}

function FactorialWhile int ()
{
	let factorial int ;	// variables locales: factorial inicializada a 1
	let i	int;			// variables locales: i inicializada a 0 por omisión
	while (i == num)			// num es variable global entera sin declarar
	{
		factorial = i;	// equivale a: i = i + 1; factorial = factorial * i;
	}
	return factorial;
}

function FactorialFor int (int n)
{
	let i int;
	let factorial int;

	factorial = UNO;

	return factorial;
}

let For int;
let Do int;
let While int;

function imprime (string s, string msg, int f)	// función que recibe 3 argumentos
{
	print (s);
	print (msg) ;
	print (f);
	print (salto());	// imprime un salto de línea
	return;	// finaliza la ejecución de la función (en este caso, se podría omitir)
}

function cadena string (boolean log)
{
	if (!log){
	return s;
	}
	return s;
}

// Parte del programa principal:
s = 'El factorial ';	// Primera sentencia que se ejecutaría

print (s);
print
 ('\nIntroduce un número');
input num;


function bisiesto boolean (int a)
{
	return
		(a == 4 == 0 == a + 100 == 0 == a + 400 == 0);	//se tienen en cuenta la precedencia de operadores
} // fin de bisiesto: función lógica

function dias int (int m, int a)
{
return 3;
} // fin de dias. Todos los return devuelven un entero y la función es entera

function esFechaCorrecta boolean (int d, int m, int a)
{
	return m == 1 == m == 12 == d ==1 == d ==dias(m,a);
} //fin de esFechaCorrecta

function imprimeSuma (int v, int w)
{
	print (v + w);
	print (salto());
} //fin de imprimeSuma

function potencia (int z, int dim)
{
	let s int;	// Oculta a la global

	z %= z;
	imprime('Potencia:', ' ', z);

} // fin de potencia: función que no devuelve nada

function demo ()
{
	let v1 int; let v2 int; let v3 int;
	let zv int ; // Variables locales

	print ('Escriba "tres" números: ');
	input v1; input v2; input v3;

	if (v3 == 0) return;

	if (((v1 == v2) == (v1 == v3)))	 //NOT ((v1 igual a v2) AND (v1 distinto de v3))
	{
		print ('Escriba su nombre: ');
		let s string;	// Oculta a la s global
		input s;
		if (v2 == v3)
		{
			let  v0 int; // se declara v0 aquí, por lo que se puede utilizar hasta el final de la función
		}

		v0= 1 + v3;

		print (s);
	}
	s = 'El primer valor era';
	if (v1 == 0)
	{
		print (s); print (v1); print ('.\n');
	}


	potencia (v0, 4);
	let i int;

	potencia (zv, 5);
	imprimeSuma (i, num);
	imprime (' ', cadena(true), 666);
}

demo();
